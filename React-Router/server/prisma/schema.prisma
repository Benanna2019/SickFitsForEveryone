// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String     @id @default(cuid())
  name              String?
  email             String?    @unique
  superTokenUserId  String    @unique
  avatar            String?
  cart              CartItem[] @relation("CartItem")
  orders            Order[]    @relation("Order")
  role              Role       @default(USER)
  products          Product[]  @relation("Product")

}

model Product {
  id                    String        @id @default(cuid())
  name                  String?
  description           String?
  photo                 ProductImage? @relation("Product", fields: [photoId], references: [id])
  photoId               String?       @unique @map("photo")
  status                String?
  price                 Int?
  user                  User?         @relation("Product", fields: [userId], references: [id])
  userId                String?       @map("user")
  from_CartItem_product CartItem[]    @relation("CartItem")

  @@index([userId])
}

model ProductImage {
  id                   String      @id @default(cuid())
  image                Json?       @db.JsonB      
  altText              String?
  product              Product?    @relation("Product")
  from_OrderItem_photo OrderItem[] @relation("OrderItem")
}

model OrderItem {
  id          String        @id @default(cuid())
  name        String?
  description String?
  photo       ProductImage? @relation("OrderItem", fields: [photoId], references: [id])
  photoId     String?       @map("photo")
  price       Int?
  quantity    Int?
  order       Order?        @relation("OrderItem", fields: [orderId], references: [id])
  orderId     String?       @map("order")

  @@index([photoId])
  @@index([orderId])
}

model Order {
  id     String      @id @default(cuid())
  total  Int?
  items  OrderItem[] @relation("OrderItem")
  user   User?       @relation("Order", fields: [userId], references: [id])
  userId String?     @map("user")
  charge String?

  @@index([userId])
}

model CartItem {
  id        String   @id @default(cuid())
  quantity  Int?
  product   Product? @relation("CartItem", fields: [productId], references: [id])
  productId String?  @map("product")
  user      User?    @relation("CartItem", fields: [userId], references: [id])
  userId    String?  @map("user")

  @@index([productId])
  @@index([userId])
}

enum Role {
  BLOCKED
  USER 
  ADMIN
}